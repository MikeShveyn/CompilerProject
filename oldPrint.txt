 void TreePrint(node* tree)
{	
	/* SET  ENDING */
	char end[3] = "";

	/* CONDITIONS */
	if(strcmp(tree->token, "IF") == 0){
		shift++;
		printf("(%s \n",tree->token);
		memcpy(end, endings[2], strlen(endings[2]));	
		
	}

	else if(strcmp(tree->token, "WHILE") == 0){
		shift++;
		printf("(%s \n",tree->token);	
		memcpy(end, endings[1], strlen(endings[1]));	
	}

	else if(strcmp(tree->token, "DO-WHILE") == 0){
		shift++;
		printf("(%s \n",tree->token);
		memcpy(end, endings[2], strlen(endings[2]));			
	}		

	else if(strcmp(tree->token, "FOR") == 0){
		shift++;
		printf("(%s \n",tree->token);
		memcpy(end, endings[1], strlen(endings[1]));			
	}		

	else if(strcmp(tree->token, "IF-ELSE") == 0){
		shift++;
		printf("(%s \n",tree->token);
		memcpy(end, endings[1], strlen(endings[1]));		
	}	

	else if(strcmp(tree->token, "INIT") == 0){
		printf("(%s \n",tree->token);
		memcpy(end, endings[1], strlen(endings[1]));			
	}

	else if(strcmp(tree->token, "UPDATE") == 0){
		printf("(%s \n",tree->token);
		memcpy(end, endings[1], strlen(endings[1]));			
	}

	else if(strcmp(tree->token, "COND") == 0){
		printf("(%s",tree->token);
		memcpy(end, endings[1], strlen(endings[1]));			
	}		

	/* FUNCTIONS */
	else if(strcmp(tree->token, "CODE") == 0){
		printf("(%s \n",tree->token);
		memcpy(end, endings[1], strlen(endings[1]));			
	}			

	else if(strcmp(tree->token, "FUNC") == 0){
		printf("(%s \n",tree->token);	
		memcpy(end, endings[1], strlen(endings[1]));				
	}	

	else if(strcmp(tree->token, "FUNCTION_CALL") == 0){
		printf("(%s \n",tree->token);	
		memcpy(end, endings[1], strlen(endings[1]));				
	}		

	else if(strcmp(tree->token, "BODY") == 0){
		shift++;
		printf("(%s ",tree->token);
		if(tree->left->left){
			memcpy(end, endings[1], strlen(endings[1]));	
			printf("\n");
		}
		else{
			printf(" NONE)\n"); 
		}		
	}	

	else if(strcmp(tree->token, "CODE_BLOCK") == 0){
		if(insideBlock == 0){
			insideBlock = 1;
		}else {
			insideBlock = 0;
		}
		shift++;
		printf("(%s \n",tree->token);
		memcpy(end, endings[1], strlen(endings[1]));				
	}	

	else if(strcmp(tree->token, "ARGS") == 0){
		printf("(%s ",tree->token);	
		if(tree->left->left){
			memcpy(end, endings[1], strlen(endings[2]));	
			printf("\n");
		}
		else{
			printf(" NONE)\n"); 
		}
	}

	else if(strcmp(tree->token, "ARG-TYPE") == 0){
		printf("( ");	
		memcpy(end, endings[0], strlen(endings[0]));	
	}

	else if(strcmp(tree->token, "RET-VOID") == 0){
		printf("\n(%s)\n",tree->token);	

	}

	else if(strcmp(tree->token, "RET") == 0){
		printf("\n(%s ",tree->token);
		if(tree->left){
			memcpy(end, endings[2], strlen(endings[2]));
		}
		else{
			printf(" NONE)\n"); 
		}	
	}	

	/* DECALRATION */
	else if(strcmp(tree->token, "VAR") == 0){
		printf("(%s ",tree->token);	
		memcpy(end, endings[0], strlen(endings[0]));
	}	

	else if(strcmp(tree->token, "ADDRESS-OF") == 0){
		printf("(%s \n",tree->token);	
		memcpy(end, endings[1], strlen(endings[1]));
	}	
			
	else if(strcmp(tree->token, "STRING") == 0){
		printf("(");
		memcpy(end, endings[0], strlen(endings[0]));
	}						

	/* LEXICAL */
	else if(strcmp(tree->token, "(") == 0){
		printf("(");
	}

	else if(strcmp(tree->token, "\n") == 0){
		printf("\n");
	}

	else if(strcmp(tree->token, ")") == 0){
		printf(")\n");
	}	

	else if(strcmp(tree->token, ",") == 0){
		printf(",");
	}

	else if(strcmp(tree->token, ";") == 0){
		printf(";");
	}


	else if(strcmp(tree->token, "&&") == 0 || strcmp(tree->token, "/") == 0 || strcmp(tree->token, "==") == 0 ||
		strcmp(tree->token, ">") == 0 || strcmp(tree->token, ">=") == 0 || 
	strcmp(tree->token, "<") == 0 || strcmp(tree->token, "<=") == 0 || strcmp(tree->token, "-") == 0 || 
	strcmp(tree->token, "!") == 0 || strcmp(tree->token, "!=") == 0 || strcmp(tree->token, "||") == 0 || 
	strcmp(tree->token, "+") == 0 || strcmp(tree->token, "*") == 0 || strcmp(tree->token, "&") == 0 || 
	strcmp(tree->token, "^") == 0 || strcmp(tree->token, "|") == 0 || strcmp(tree->token, ",") == 0 ){

		
		printf("\n");
		CalcShift(shift);
		printf("(%s ", tree->token);
		memcpy(end, endings[2], strlen(endings[2]));
	}

	else if(strcmp(tree->token, "=") == 0) {
		printf("(%s ", tree->token);
		memcpy(end, endings[2], strlen(endings[2]));
	}


	else{
		if(tree && (!tree->left && !tree->right)){
			printf("%s ", tree->token);
		}
		else{
			printf("%s ", tree->token);
		}
	}



		
	/* POST ORDER CALLS  */
	if (tree->left) {
		
		CalcShift(shift);

	 	TreePrint(tree->left);

							
		if(shift > 0 && insideBlock == 0) {
			shift--;
		}
	}
	
	if (tree->right){

		CalcShift(shift);

	 	TreePrint(tree->right);

		if(shift> 0 && insideBlock == 0) {
			shift--;
		}
	}

	if(strcmp(end, "\n)") == 0){
		printf("%s", end);
		CalcShift(shift);
	}else{
		CalcShift(shift);
		printf("%s", end);
	}	
}